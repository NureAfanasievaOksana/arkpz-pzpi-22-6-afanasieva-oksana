Міністерство освіти і науки України
Харківський національний  університет радіоелектроніки


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи №2
з дисципліни «Аналіз та рефакторінг коду»
на тему: «Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу»


Виконала:	             Перевірив:
ст. гр. ПЗПІ-22-6	     ст. викладач
Афанасьєва О.М.	       Сокорчук І. П.




Харків 2024
2 РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ
2.1	 Мета роботи
Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
2.2	 Хід роботи
2.2.1 Розробити будову програмної системи
Проєкт використовує клієнт-серверну архітектуру. Серверна частина реалізована на платформі ASP.NET Core, що забезпечує високу продуктивність, кросплатформність та можливість легкого масштабування системи. Для зберігання даних використовується реляційна система управління базами даних MS SQL. Для ефективної роботи з базою даних застосовується Entity Framework Core. В той час як безпека системи забезпечується за допомогою JWT автентифікації.
Серверна частина складається з:
a)	Модуль авторизації та аутентифікації:
1)	Використання JWT для забезпечення безпеки користувачів.
b)	Модуль користувача:
1)	Авторизація;
2)	Перегляд персональних даних та можливість їх редагування;
3)	Перегляд даних про стан контейнерів;
c)	Модуль управління контейнерами:
1)	Створення, перегляд, редагування та видалення контейнерів;
2)	Перегляд стану контейнерів, його рівень заповнення, температура та вологість.
d)	Модуль обробки даних сенсорів:
1)	Створення, перегляд, редагування та видалення сенсорів;
2)	Отримання даних від IoT-сенсорів, сюди входить рівень заповнення, температура та вологість;
3)	Виконання оцінки стану контейнерів, класифікація на нормальний та критичний стан.
e)	Модуль аналітики:
1)	Аналіз зібраних даних;
2)	Генерація звітів про стан контейнерів.
f)	Модуль сповіщень:
1)	Генерація сповіщень про критичні події для адміністраторів.
g)	Модуль адміністрування:
1)	Управління користувачами системи, перегляд та видалення;
2)	Отримання сповіщень про критичні події;

2.2.2 Створити UML діаграму прецедентів для серверної частини системи

Рисунок 1 – UML діаграма прецедентів

2.2.3 Створити ER діаграму даних
 
Рисунок 2 – ER діаграма даних

2.2.4 Розробити базу даних програмної системи
Таблиця 1 - Таблиця бази даних “user”
user_id	INT PRIMARY KEY	NOT NULL
username	NVARCHAR(100)	NOT NULL
address	NVARCHAR(100)	NULL
email	VARCHAR(50)	NOT NULL
password	VARCHAR(100)	NOT NULL
role	ENUM(‘user, ‘admin’)	NOT NULL

Таблиця 2 - Таблиця бази даних “container”
container_id	INT PRIMARY KEY	NOT NULL
address	NVARCHAR(100)	NOT NULL
type	ENUM(‘plastic’, ‘paper, ‘glass’, ‘metal’, ‘electronics’, ‘organic)	NOT NULL
max_size	FLOAT(6, 2)	NOT NULL
user_id	INT FOREIGN KEY	NULL

Таблиця 3 - Таблиця бази даних “sensor”
sensor_id	INT PRIMARY KEY	NOT NULL
type	ENUM(‘fullness’, ‘temperature’, ‘wetness’)	NOT NULL
container_id	INT FOREIGN KEY	NOT NULL

Таблиця 4 - Таблиця бази даних “sensor_data”
sensor_data_id	INT PRIMARY KEY	NOT NULL
timestamp	DATETIME	NOT NULL
value	FLOAT(5, 2)	NOT NULL
sensor_id	INT FOREIGN KEY	NOT NULL

Таблиця 5 - Таблиця бази даних “notification”
notification_id	INT PRIMARY KEY	NOT NULL
message	TEXT	NOT NULL
timestamp	DATETIME	NOT NULL
sensor_data_id	INT FOREIGN KEY	NULL
user_id	INT FOREIGN KEY	NOT NULL

2.2.5 Створити діаграму структури БД
 
Рисунок 3 – Діаграма структури БД

2.2.6 Розробити функції роботи з БД
Для взаємодії з базою даних використовується SortGarbageDbContext, який забезпечує доступ до таблиць бази даних через властивості DbSet<T>. Було створено таблиці Users, Containers, Sensors, SensorData, та Notifications. Саме створення та оновлення схеми бази даних виконувалося через механізм міграцій Entity Framework Core.
Для інкапсуляції логіки роботи з базою даних було створено сервіси, що виконують CRUD-операції.
У додатку А наведено приклад реалізації моделі даних та деяких CRUD-операцій над цією моделю.

2.2.7 Розробити API для взаємодії серверної частини з клієнтами
Було створено контролери, що відповідають за обробку http-запитів та взаємодіють з сервісами для виконання логіки.
Приклад контролера наведено в додатку Б.

2.2.8 Створити специфікацію розробленого API
Таблиця 6 – Специфікація API
GET	/users	Отримати список усіх користувачів
POST	/users	Створити нового користувача, зареєструватися
GET	/users/{id}	Отримати певного користувача
PUT	/users/{id}	Оновити певного користувача
DELETE	/users/{id}	Видалити певного користувача
GET	/containers	Отримати список контейнерів
POST	/containers	Додати новий контейнер
GET	/containers/{id}	Отримати певний контейнер
PUT	/containers/{id}	Оновити певний контейнер
DELETE	/containers/{id}	Видалити певний контейнер
GET	/containers/type/{type}	Отримати контейнери з певним типом відходів
GET	/containers/address/{address}	Отримати контейнери з певною адресою
GET	/sensors	Отримати список сенсорів
POST	/sensors	Додати новий сенсор
GET	/sensors/{id}	Отримати певний сенсор
PUT	/sensors/{id}	Оновити певний сенсор
DELETE	/sensors/{id}	Видалити певний сенсор
GET	/sensordata	Отримати список отриманих сенсорами даних
POST	/sensordata	Додати нові дані сенсора
GET	/sensordata/{id}	Отримати певні дані сенсора
DELETE	/sensordata/{id}	Видалити певні дані сенсора
GET	/sensordata/sensor/{sensorId}	Отримати дані з певного сенсора
GET	/sensordata/date/{date}	Отримати дані за обрану дату
GET	/notifications	Отримати список сповіщень
POST	/notifications	Створити сповіщення
GET	/notifications/{id}	Отримати певне сповіщення
DELETE	/notifications/{id}	Видалити певне сповіщення
GET	/notifications /users/{userId}	Отримати сповіщення певного користувача
GET	/notifications/date/{date}	Отримати сповіщення за обрану дату

2.3	Висновок: 
Під час виконання лабораторної роботи було розроблено базу даних для серверної частини  програмної системи та прикладний програмний інтерфейс.
2.4 Посилання:
Посилання на GitHub репозиторій:
https://github.com/NureAfanasievaOksana/arkpz-pzpi-22-6-afanasieva-oksana/tree/main/Task2
Посилання на YouTube відео з виступом:


 
ДОДАТОК А
Фрагменти програмного коду з логікою взаємодії серверної частини з базою даних

1 namespace SortGarbageAPI.Models
2 {
3     using System.ComponentModel.DataAnnotations;
4 
5     /// <summary>
6     /// Defines the <see cref="User" />
7     /// </summary>
8     public class User
9     {
10         #region Properties
11 
12         [StringLength(100)]
13         public string? Address { get; set; }
14 
15         [Required]
16         [StringLength(50)]
17         [EmailAddress]
18         public string Email { get; set; }
19 
20         [Required]
21         [StringLength(60)]
22         public string Password { get; set; }
23 
24         [Required]
25         public UserRole Role { get; set; }
26 
27         [Key]
28         public int UserId { get; set; }
29 
30         [Required]
31         [StringLength(100)]
32         public string Username { get; set; }
33 
34         #endregion
35     }
36 }

1 public async Task<User?> GetUserByIdAsync(int id)
2 {
3     return await _dbContext.Users.FindAsync(id);
4 }
5 
6 public async Task<User> CreateUserAsync(User user)
7 {
8     user.Password = BCrypt.Net.BCrypt.HashPassword(user.Password);
9     _dbContext.Users.Add(user);
10     await _dbContext.SaveChangesAsync();
11     return user;
12 }
13 
14 public async Task<bool> UpdateUserAsync(int id, User updatedData)
15 {
16     var user = await _dbContext.Users.FindAsync(id);
17     if (user == null) 
18     { 
19         return false; 
20     }
21 
22     user.Username = updatedData.Username;
23     user.Address = updatedData.Address;
24     user.Email = updatedData.Email;
25     if (!string.IsNullOrEmpty(updatedData.Password))
26     {
27         user.Password = BCrypt.Net.BCrypt.HashPassword(updatedData.Password);
28     }
29     _dbContext.Users.Update(user);
30     await _dbContext.SaveChangesAsync();
31     return true;
32 }
 
ДОДАТОК Б
Фрагменти програмного коду з логікою взаємодії серверної частини з клієнтами

1 [HttpPost]
2 public async Task<IActionResult> CreateUser([FromBody] User user)
3 {
4     if (await _userService.EmailExistsAsync(user.Email))
5     {
6         return BadRequest("There is already a user with this email");
7     }
8 
9     var createdUser = await _userService.CreateUserAsync(user);
10     return CreatedAtAction(nameof(GetUserById), new { id = createdUser.UserId }, createdUser);
11 }
12 
13 [HttpGet("{id}")]
14 public async Task<IActionResult> GetUserById(int id)
15 {
16     var user = await _userService.GetUserByIdAsync(id);
17     if (user == null)
18     {
19         return NotFound();
20     }
21     return Ok(user);
22 }
23 
24 [HttpPut("{id}")]
25 public async Task<IActionResult> UpdateUser(int id, [FromBody] User updatedData)
26 {
27     if (!await _userService.UpdateUserAsync(id, updatedData))
28     {
29         return NotFound();
30     }
31     return Ok("User data updated successfully");
32 }
